# Configuration file for openmm
# Generated on not0rious, 2013-11-05 05:53:44.760905
# OpenMM version 5.2
# Invocation command line: /home/leeping/local/bin/openmm --coords input.pdb --sysxml system.xml

#------------------------------------------------------------------------------
[General]
#------------------------------------------------------------------------------
# General options, including the force field, platform, and coordinates.
#------------------------------------------------------------------------------

# Supply one OpenMM system XML file, which comes from a serialized System object
# and provides a complete system.
sysxml = system.xml

# Supply one AMBER prmtop file, which provides a complete topology and system.
# prmtop =

# Supply one or more custom force field files, in the OpenMM XML format. This
# can be used to specify a force field for ligands, nonstandard amino acids,
# etc.
# ffxml = []

# Write a system XML file, which this program can read using the "sysxml"
# option.
# serialize =

# Level of numeric precision to use for calculations.
# Choices: [Single, Mixed, Double]
precision = Mixed

# Water model  to use in the simulation.
# Choices: [SPC/E, TIP3P, TIP4P-Ew, TIP5P, Implicit, None]
# NOTE: Deactivated because system is being loaded from an XML file.
# water = None

# OpenMM runs simulations on four platforms: Reference, CUDA, CPU, and OpenCL.
# If not specified, the fastest available platform will be selected
# automatically.
# Choices: [Reference, OpenCL, CUDA, CPU, NotSpecified]
platform = CUDA

# OpenMM can take a pdb, which contains the coordinates and topology, or AMBER
# inpcrd, which contains coordinates.
coords = input.pdb

# Supply the device index of the CUDA device (i.e. NVidia GPU) or OpenCL device
# that you want to run on. Defaults to the fastest device available.
# device = 0

# Force Field to use for the protein atoms. For details, consult the literature.
# Choices: [amber96, amber99sb, amber99sb-ildn, amber99sb-nmr, amber03, amber10,
# amoeba2009]
# NOTE: Deactivated because system is being loaded from an XML file.
# protein = None

# Supply one GROMACS .top file, which provides a complete topology and system.
# gmxtop =

#------------------------------------------------------------------------------
[System]
#------------------------------------------------------------------------------
# Parameters for the system, including the method for calculating nonbonded
# forces, constraints, and initialization of velocities.
#------------------------------------------------------------------------------

# Cutoff for long-range non-bonded interactions. This option is used for all
# non-bonded methods except for "NoCutoff".
# NOTE: Deactivated because system is being loaded from an XML file.
# cutoff = 1.0*nanometer

# Initialize the system with random initial velocities, drawn from the Maxwell
# Boltzmann distribution.
# NOTE: Deactivated because system is being loaded from an XML file.
# rand_vels = True

# Apply an isotropic long-range correction for the vdW interactions.
# NOTE: Deactivated because system is being loaded from an XML file.
# disp_corr = True

# Keep water rigid. Be aware that flexible water may require you to further
# reduce the integration step size, typically to about 0.5 fs.
# NOTE: Deactivated because system is being loaded from an XML file.
# rigid_water = True

# Temperature used for generating initial velocities. This option is only used
# if rand_vels == True.
# NOTE: Deactivated because system is being loaded from an XML file.
# gen_temp = 300*kelvin

# Specific cutoff for van der Waals interactions used in the  AMOEBA force
# field.
# vdw_cutoff = 1.0*nanometer

# Choose direct or mutual polarization for the AMOEBA polarizable force field.
# Choices: [direct, mutual]
# polarization = mutual

# The error tolerance is roughly equal to the fractional error in the forces due
# to truncating the Ewald summation.
# NOTE: Deactivated because system is being loaded from an XML file.
# ewald_tol = 0.0005

# Choose SCF tolerance for polarizable force field (e.g. AMOEBA with
# polarization mutual).
# polar_eps = 1e-05

# Method for calculating long range non-bondend interactions. Refer to the user
# guide for a detailed discussion.
# Choices: [NoCutoff, CutoffNonPeriodic, CutoffPeriodic, Ewald, PME]
# NOTE: Deactivated because system is being loaded from an XML file.
# nb_method = PME

# Specify a 3-vector for the PME grid dimensions in AMOEBA (also requires aewald
# parameter.)
# pme_grid = [24, 24, 24]

# The error tolerance is roughly equal to the fractional error in the forces due
# to truncating the Ewald summation.
# aewald = 5.4459052

# Applying constraints to some of the atoms can enable you to take longer
# timesteps.
# Choices: [None, HBonds, AllBonds, HAngles]
# NOTE: Deactivated because system is being loaded from an XML file.
# constraints = HBonds

#------------------------------------------------------------------------------
[Dynamics]
#------------------------------------------------------------------------------
# Parameters for the integrator, thermostats and barostats.
#------------------------------------------------------------------------------

# Friction coefficient, for use with stochastic integrators or the Anderson
# thermostat.
collision_rate = 1.0/picosecond

# Activate a barostat for pressure coupling. The MC barostat requires
# temperature control (stochastic integrator or Andersen thermostat) to be in
# effect as well.
# Choices: [MonteCarlo, MonteCarloAnisotropic, None]
# NOTE: Deactivated because system is being loaded from an XML file.
# barostat = None

# Activate a thermostat to maintain a constant temperature simulation.
# Choices: [Andersen, None]
# NOTE: Deactivated because system is being loaded from an XML file.
# thermostat = None

# Temperature of the heat bath, used either by a stochastic integrator or the
# Andersen thermostat to maintain a constant temperature ensemble.
temp = 300*kelvin

# Pressure target, used by a barostat.
# pressure = 1*atmosphere

# OpenMM offers a choice of several different integration methods. Refer to the
# user guide for details.
# Choices: [Langevin, Verlet, Brownian, VariableLangevin, VariableVerlet,
# VelocityVerlet]
integrator = Langevin

# Switch for scaling the x-axis, used by the Monte Carlo anisotropic barostat.
# scalex = True

# Switch for scaling the y-axis, used by the Monte Carlo anisotropic barostat.
# scaley = True

# Switch for scaling the z-axis, used by the Monte Carlo anisotropic barostat.
# scalez = True

# Pressure target, used by the Monte Carlo anisotropic barostat.
# pressure3 = [1, 1, 1]

# The frequency (in time steps) at which Monte Carlo pressure changes should be
# attempted. This option is only invoked when barostat in [MonteCarlo,
# MonteCarloAnisotropic].
# barostat_interval = 25

# Timestep for fixed-timestep integrators.
dt = 2*femtosecond

# Tolerance for variable timestep integrators ('VariableLangevin',
# 'VariableVerlet'). Smaller values will produce a smaller average step size.
# tolerance = 0.0001

#------------------------------------------------------------------------------
[Simulation]
#------------------------------------------------------------------------------
# Parameters for the simulation, including the mode and frequency with which
# files are saved to disk, the number of steps, etc.
#------------------------------------------------------------------------------

# Number of steps of simulation to run.
n_steps = 10000

# Filename for reading/writing the restart file.
restart_file = restart.json.bz2

# First perform local energy minimization, to find a local potential energy
# minimum near the starting structure.
minimize = True

# Frequency, in steps, to save the restart file.
restart_freq = 5000

# Filename to save the resulting trajectory to, in DCD format.
traj_file = output.dcd

# Switch for whether to read restart information from file.
read_restart = False

# Frequency, in steps, to print summary statistics on the state of the
# simulation.
progress_freq = 1000

# Switch for whether to write restart information to file.
write_restart = True

# Frequency, in steps, to save the state to disk in the DCD format.
traj_freq = 1000

