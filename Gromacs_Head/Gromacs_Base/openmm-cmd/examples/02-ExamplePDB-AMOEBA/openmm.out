
>>> ###################################################################
>>> # To use this script, paste all of the lines starting with the
>>> # three greater than signs (>>>) into a python interpreter.
>>> ###################################################################
>>> 
>>> from simtk.unit import *
>>> from simtk import openmm as mm
>>> from simtk.openmm import app
>>> 
>>> pdb = app.PDBFile('input.pdb')
>>> topology = pdb.topology
>>> positions = pdb.positions
>>> forcefield = app.ForceField('amoeba2009.xml')
>>> system = forcefield.createSystem(topology,nonbondedMethod=PME,constraints=HBonds
... ,rigidWater=True,nonbondedCutoff=1.0*nanometer,useDispersionCorrection=True,pola
... rization=mutual,polar_eps=1e-05,ewaldErrorTolerance=0.0005)
########################################################################
# Option Summary. A more detailed config file is saved to config.out.ini
########################################################################

[General]                       
protein = amoeba2009             # your selection
water = None                     # default value
platform = CUDA                  # your selection
coords = input.pdb               # your selection
precision = Mixed                # default value

[System]                        
nb_method = PME                  # default value
constraints = HBonds             # default value
rigid_water = True               # default value
rand_vels = True                 # default value
disp_corr = True                 # default value
ewald_tol = 0.0005               # default value
cutoff = 1.0*nanometer           # default value
gen_temp = 300*kelvin            # default value
vdw_cutoff = 1.0*nanometer       # default value
polarization = mutual            # default value
polar_eps = 1e-05                # default value

[Dynamics]                      
integrator = Langevin            # default value
dt = 0.5*femtosecond             # your selection
barostat = None                  # default value
thermostat = None                # default value
temp = 300*kelvin                # default value
collision_rate = 1.0/picosecond  # default value

[Simulation]                    
n_steps = 10000                  # default value
restart_file = restart.json      # default value
minimize = False                 # your selection
restart_freq = 5000              # default value
traj_file = output.dcd           # default value
read_restart = False             # default value
progress_freq = 1000             # default value
write_restart = True             # default value
traj_freq = 1000                 # default value

>>> integrator = mm.LangevinIntegrator(300*kelvin, 1.0/picosecond, 0.5*femtosecond)
>>> platform = mm.Platform.getPlatformByName('CUDA')
>>> platformProperties = {'CudaPrecision': 'mixed'}
>>> simulation = app.Simulation(topology, system, integrator, platform, properties)
