# This file holds some additional scripting that is used for the automated
# testing of the GROMACS project. The file is only processed when building as
# part of the full GROMACS build.


# Make sure pytest is found or produce a fatal error
if(NOT GMXAPI_PYTEST_FOUND)
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import pytest; print(pytest.__version__)"
                    RESULT_VARIABLE pytest_not_found OUTPUT_VARIABLE pytest_version ERROR_QUIET)
    if(pytest_not_found)
        message(FATAL_ERROR "Running the tests requires pytest. Please install it manually"
                " (try: ${PYTHON_EXECUTABLE} -m pip install pytest)")
    elseif(pytest_version VERSION_LESS 3.0)
        message(FATAL_ERROR "Running the tests requires pytest >= 3.0. Found: ${pytest_version}"
                "Please update it (try: ${PYTHON_EXECUTABLE} -m pip install -U pytest)")
    endif()
    set(GMXAPI_PYTEST_FOUND TRUE CACHE INTERNAL "Suppress checking for Python pytest module.")
endif()

get_target_property(GMXAPI_PYTHON_STAGING_DIR _gmxapi staging_dir)
get_target_property(PLUGINPATH gmxapi_extension LIBRARY_OUTPUT_DIRECTORY)
add_custom_target(gmxapi_extension_pytest
                  COMMAND ${CMAKE_COMMAND}
                               -E env PYTHONPATH=${GMXAPI_PYTHON_STAGING_DIR}:${PLUGINPATH}
                               ${PYTHON_EXECUTABLE} -m pytest --log-cli-level ERROR
                               ${CMAKE_CURRENT_SOURCE_DIR}
                  DEPENDS gmxapi_extension _gmxapi)
# The current test fixtures require the `gmx` tool-wrapper executable.
add_dependencies(gmxapi_extension_pytest gmx)

add_dependencies(check gmxapi_extension_pytest)

if(MPIEXEC_EXECUTABLE)
    if(NOT GMXAPI_MPI4PY_FOUND)
        if (MPI_C_COMPILER)
            set(_mpicc "MPICC=${MPI_C_COMPILER} ")
        endif ()

        execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import mpi4py; print(mpi4py.__version__)"
                        RESULT_VARIABLE mpi4py_not_found OUTPUT_VARIABLE mpi4py_version ERROR_QUIET)
        if(mpi4py_not_found)
            message(STATUS "Running the MPI-enable tests requires mpi4py. Please install it manually. "
                    "(Try: `${_mpicc}${PYTHON_EXECUTABLE} -m pip install mpi4py`, "
                    "then clear the GMXAPI_MPI4PY_FOUND cache variable "
                    "or remove the CMakeCache.txt, and configure again.)")
        elseif(mpi4py_version VERSION_LESS 3.0.3)
            message(STATUS "Running the MPI-enabled tests requires mpi4py >= 3.0.3. Found: ${mpi4py_version}"
                    "Please update it (try: ${_mpicc}${PYTHON_EXECUTABLE} -m pip install -U mpi4py)")
        endif()

        unset(_mpicc)
        set(GMXAPI_MPI4PY_FOUND TRUE CACHE INTERNAL "Suppress checking for Python mpi4py module.")
    endif()

    # In case this output becomes too noisy or confusing, Note:
    #    For Multiple Instruction Multiple Data Model for OpenMPI mpirun, we can
    #    make the non-root rank less noisy by providing different argv after a colon (`:`)
    #    (https://www.open-mpi.org/doc/v3.0/man1/mpiexec.1.php)
    add_custom_target(
        gmxapi_extension_pytest_mpi
        COMMAND ${MPIEXEC_EXECUTABLE} -n 4 -x PYTHONPATH=${GMXAPI_PYTHON_STAGING_DIR}:${PLUGINPATH}
            ${PYTHON_EXECUTABLE} -m mpi4py -m pytest -x --log-cli-level ERROR ${CMAKE_CURRENT_SOURCE_DIR}
            DEPENDS gmxapi_extension _gmxapi gmx
            )

    add_dependencies(check gmxapi_extension_pytest_mpi)
endif()
